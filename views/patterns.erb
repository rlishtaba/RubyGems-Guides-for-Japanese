<!--
Patterns
Common practices to make your gem users’ and other developers’ lives easier.
-->

<h2>
	パターン<br />
	<small>一般的なプラクティスは、あなたのgemの利用者や他の開発者の作業をより容易にします。</small>
</h2>

<hr />

<!--
Consistent naming
Semantic versioning
Declaring dependencies
Loading code
Prerelease gems
-->

<ul>
	<li><a href="#consistent-naming">一貫性のある命名</a></li>
	<li><a href="#semantic-versioning">意味のあるバージョン付け</a></li>
	<li><a href="#declaring-dependencies">依存性の宣言</a></li>
	<li><a href="#loading-code">コードを読み込む</a></li>
	<li><a href="#prerelease-gems">プレリリースgem</a></li>
</ul>

<hr />

<!--
Consistent naming
There are only two hard things in Computer Science: cache invalidation and naming things. -Phil Karlton

File names
Be consistent with how your gem files in lib and bin are named.
The hola gem from the make your own gem guide is a great example:
-->

<h3>一貫性のある命名</h3>
<blockquote>
	コンピュータ科学には2つの難しいことがあります。
	それはキャッシュの無効かと物事の命名だ。
	ー<a href="http://martinfowler.com/bliki/TwoHardThings.html">Phil Karlton</a>
</blockquote>

<h4><p>ファイルの名前</p></h4>

<p>
	「lib」や「bin」の中にあるあなたのgemファイルの名前の付け方に一貫性を持たせます。
	<a href="/make-your-own-gem/">あなたのgemを作ろう</a>ガイドの「<a href="http://github.com/qrush/hola">hola</a>」gemは非常によい例です。
</p>

<pre>
% tree
.
├── Rakefile
├── bin
│   └── hola
├── hola.gemspec
├── lib
│   ├── hola
│   │   └── translator.rb
│   └── hola.rb
└── test
    └── test_hola.rb
</pre>

<!--
The executable and the primary file in lib are named the same. 
A developer can easily jump in and call require 'hola' with no problems.
-->

<p>
	実行可能ファイルと「lib」の中の重要なファイルは同じ名前がつけられています。
	開発者は簡単に飛び込めて、何の問題も無く「require 'hola'」を呼び出すことができます。
</p>

<!--
Naming your gem
Naming your gem is important. 
Before you pick a name for your gem, please do a quick search on RubyGems.org or GitHub to see if someone else has taken it. 
Every published gem must have a unique name. 
There are also some guidelines to selecting a good gem name, paraphrased below.
-->

<h4><p>あなたのgemの命名</p></h4>

<p>
	gemの命名は非常に重要です。
	あなたのgemの名前を選ぶ前に、他の誰かがそれを作っているかを見るために<a href="http://rubygems.org">RubyGems.org</a>か<a href="http://github.com/search">GitHub</a>をさっと検索するようにして下さい。
	全ての公開されるgemの嘗めはユニークでなければなりません。
	下記のような、よいgemの名前を選択するための<a href="http://blog.segment7.net/2010/11/15/how-to-name-gems">ガイドライン</a>もあります。
</p>

<!--
Use underscores for spaces
This is a typical Ruby convention. 
For example, if a class name is BufferedLogger, the file for it is usually buffered_logger.rb. 
Some examples of gems that follow this pattern include newrelic_rpm and factory_girl.

The main reason behind this is that the file name matches what your users will require along with the name. 
For example, gem install my_gem will match require 'my_gem'.
-->

<h4><p>スペースのためにアンダースコアを使う</p></h4>

<p>
	これは典型的なRubyの習慣です。
	例えば、もしクラス名が「BufferedLogger」なら、そのファイル名はたいてい「buffered_logger.rb」となります。
	このパターンに影響を受けているgemのいくつかの例としては、<a href="http://rubygems.org/gems/newrelic_rpm">newrelic_rpm</a>や<a href="http://rubygems.org/gems/factory_girl">factory_girl</a>が含まれます。
</p>

<p>
	これの裏にある主な理由は、ファイル名が利用者が名前と一緒に「require」することと一致します。
	例えば、「gem install my_gem」は「require 'my_gem'」と一致します。
</p>

<!--
Use dashes for extensions
Adding new functionality to an existing gem? Use a dash. 
Some examples include net-http-persistent and autotest-growl.

Usually this implies that the user will have to require into the extended gem’s directory tree as well. 
For example, gem install net-http-persistent becomes require 'net/http/persistent'.
-->

<h4><p>拡張のためにダッシュを使う</p></h4>

<p>
	既存のgemに新しい機能を追加する？
	ダッシュを使います。
	いくつかの例としては、<a href="https://rubygems.org/gems/net-http-persistent">net-http-persistent</a>や<a href="https://rubygems.org/gems/autotest-growl">autotest-growl</a>です。
</p>

<p>
	たいていこれは、利用者は拡張されたgemのディレクトリツリーのように「require」する必要があることを暗示します。
	例えば、「gem install net-http-persistent」は「require 'net/http/persistent'」となります。
</p>

<!--
Don’t use UPPERCASE
Gems with uppercase names cause problems for gem users on OSX and Windows, which use case-insensitive filesystems. 
Plus, when installing gems it’s confusing. 
Do I run gem install Hola or gem install hola ? 
The best practice is to use all lowercase when naming gems.
-->

<h4><p>大文字は使わない</p></h4>

<p>
	大文字を含むgemの名前は、大文字と小文字を区別しないファイルシステムを使うOSXやwindowsのユーザのgemに問題を起こします。
	それにgemをインストールする時に紛らわしいのです。
	わたしは「gem install Hola」か「gem install hola」のどちらを実行しますか？
	gemに名前をつける時のベストプラクティスは、全て小文字を使うことです。
</p>

<hr />

<!--
Semantic versioning

A versioning policy is merely a set of simple rules governing how version numbers are allocated. 
It can be very simple (e.g. the version number is a single number starting with 1 and incremented for each successive version), 
or it can be really strange (Knuth’s TeX project had version numbers: 3, 3.1, 3.14, 3.141, 3.1415; each successive version added another digit to PI).

The RubyGems team urges gem developers to follow the Semantic Versioning standard for their gem’s versions. 
The RubyGems library itself does not enforce a strict versioning policy, 
but using an “irrational” policy will only be a disservice to those in the community who use your gems.

Suppose you have a ‘stack’ gem that holds a Stack class with both push and pop functionalty. 
Your CHANGELOG with might look like this if you use semantic versioning:
-->

<h4><p>意味のあるバージョニング</p></h4>

<p>
	バージョニング・ポリシーは、単にバージョン番号が割り当てられた方法を管理する単純なルールのセットです。
	それは簡単（例えば、バージョン番号は1から始まる単一の番号で連続したバージョンごとにインクリメントする）にできたり、
	本当におかしなこと（Knuth’s TeX project は、πになるように別の数字を追加した連続したバージョン番号 3, 3.1, 3.14, 3.141, 3.1415がある）にできます。
</p>

<p>
	RubyGemsチームは、gemの開発者達に、gemのバージョンのための標準的な<a href="http://semver.org">意味のあるバージョニング</a>に従うように促します。
	RubyGemsライブラリ自体は、厳密なバージョニング・ポリシーを強制することはありませんが、「不合理」なポリシーを使うことだけで、あなたのgemを使うコミュニティの人々に迷惑をかけることになるでしょう。
</p>

<p>
	あなたは、「push」と「pop」の両方の機能を持つ「Stack」クラスを保持している「stack」gemを持っていると仮定します。
	もしあなたが意味のあるバージョニングを使っているなら、あなたの「CHANGELOG」はこのように見えるかもしれない。
</p>

<ul>
<li><b>Version 0.0.1</b>: The initial Stack class is released.</li>
<li><b>Version 0.0.2</b>: Switched to a linked list implementation because it is cooler.</li>
<li><b>Version 0.1.0</b>: Added a depth method.</li>
<li><b>Version 1.0.0</b>: Added top and made pop return nil (pop used to return the old top item).</li>
<li><b>Version 1.1.0</b>: push now returns the value pushed (it used it return nil).</li>
<li><b>Version 1.1.1</b>: Fixed a bug in the linked list implementation.</li>
<li><b>Version 1.1.2</b>: Fixed a bug introduced in the last fix.</li>
</ul>

<!--
Semantic versioning boils down to:

PATCH 0.0.x level changes for implementation level detail changes, such as small bug fixes
MINOR 0.x.0 level changes for any backwards compatible API changes, such as new functionality/features
MAJOR x.0.0 level changes for backwards incompatible API changes, such as changes that will break existing users code if they update
-->

<p>意味のあるバージョニングはつまるところ、</p>

<ul>
<li><b>PATCH</b> 0.0.x level 実装レベルの細かな変更や、小さなバグフィックスのような変更</li>
<li><b>MINOR</b> 0.x.0 level 後方互換性APIの変更や、新機能/機能のような変更</li>
<li><b>MAJOR</b> x.0.0 level 後方互換性の無いAPIの変更や、それを更新すると既存のユーザのコードを壊してしまうような変更</li>
</ul>

<hr />

<!--
Declaring dependencies

Gems work with other gems. Here are some tips to make sure they’re nice to each other.
-->

<h3 id="declaring-dependencies">依存性の宣言</h3>

<p>
	Gemは他のgemと一緒に働きます。
	gemがお互いによい状態にあることを確認するためのいくつかのヒントがここにあります。
</p>

<h4>
  <p>Runtime vs. development</p>
</h4>

<p>
RubyGemsは主に２つの「タイプ」の依存性を提供します：runtimeとdevelopmentです。
Runtimeタイプはあなたのgemを動作させるのに必要な依存性です。
(<a href="http://rubygems.org/gems/rails">rails</a>が<a href="http://rubygems.org/gems/activesupport">activesupport</a>を必要としているような)
</p>
  
<p>
Developmentタイプは他の誰かがあなたのgemを修正しようとするときに便利な依存性です。あなたがDevelopmentタイプの依存性を特定していた場合、ほかの開発者は"gem install --dev your_gem"を実行できます。そして、RubyGemsは両方の依存性(runtimeとdevelopment)を把握します。典型的にはdevelopmentタイプの依存性はテストフレームワークとビルドシステムを含んでいます。
</p>
<p>
依存性をあなたのgemspecに設定するのは簡単です。ただ、add_runtime_dependencyとadd_development_dependency:を使えばいいのです:
</p>

<pre>
Gem::Specification.new do |s|
  s.name = "hola"
  s.version = "2.0.0"
  s.add_runtime_dependency "daemons",
    ["= 1.1.0"]
  s.add_development_dependency "bourne",
    [">= 0"]
</pre>

<h4><p>あなたのgemのなかではgemは使わないでください。</p></h4>
<p>
あなたはgemの特定のバージョンを使っているか確かめる次のようなコードをみたことがあるかもしれません。
</p>

<pre>
gem "extlib", ">= 1.0.8"
require "extlib"
</pre>
<p>
アプリケーションがたくさんのgemをその中で使うのは合理的です（もちろん<a href="http://gembundler.com/">bundler</a>のようなツールを使ってもいいのだけれど)。
gemそのものはそのようなことをするべきではありません。代わりにgemspecのなかで依存性を使うべきです。そうすることで、RubyGemsはユーザーの代わりに依存性のロードを処理してくれます。
</p>

<h4><p>悲観的なバージョン制約</p></h4>
<p>もしあなたのgemが適切に<a href="http://semver.org/">セマンティックバージョニング</a>とバージョニングスキームに従っているのであれば、
	ほかのRuby開発者たちはあなたのgemを彼らのアプリで使うときのバージョン制約を選ぶときに役立つでしょう。</p>
<p>例えば、あるgemは次のようなリリースでした。</p>
<!--
Let’s say the following releases of a gem exist:
-->

<ul>
  <li>Version 2.1.0 — Baseline</li>
  <li>Version 2.2.0 — Introduced some new (backward compatible) features.</li>
  <li>Version 2.2.1 — Removed some bugs</li>
  <li>Version 2.2.2 — Streamlined your code</li>
  <li>Version 2.3.0 — More new features (but still backwards compatible).</li>
  <li>Version 3.0.0 — Reworked the interface. Code written to verion 2.x might not work.</li>
</ul>
<p>あなたのgemを使いたい誰かが彼らのソフトウェアでバージョン2.2.0が動くことがわかりました。しかし、バージョン2.1.0は彼らの必要な機能がなかったとします。あなたのgemに依存性を加える(あるいはBundlerのGemfileに加える)ならこのような感じです。</p>
<pre>
# gemspec
spec.add_runtime_dependency 'library',
  '>= 2.2.0'

# bundler
gem 'library', '>= 2.2.0'
</pre>

<p>これは「楽観的な」バージョン制約です。これは私のソフトウェアは2.0以降のすべての変更で動くということを意味します。しかし、これは大抵そのとおりにはなりません。(バージョン3.0.0!を見てください！)</p>

<p>もう一つの方法は「悲観的」になることです。これは明確にあなたのコードを破壊しかねないバージョンを除外します。</p>

<pre>
# gemspec
spec.add_runtime_dependency 'library',
  ['>= 2.2.0', '< 3.0']

# bundler
gem 'library', '>= 2.2.0', '< 3.0'
</pre>
<p>RubyGemsはこのためにショートカットを用意しています。これは「<a href ="http://robots.thoughtbot.com/post/2508037841/rubys-pessimistic-operator-and-locking-gem-versions">twiddle-wakka</a>」としてよく知られています。：</p>

<pre>
# gemspec
spec.add_runtime_dependency 'library',
  '~> 2.2'

# bundler
gem 'library', '~> 2.2'
</pre>

<p>こんどはパッチレベルのバージョンナンバーを書いてないことに注意してください。もし、「~> 2.2.0」と書いたら、それは「'>= 2.2.0', '< 2.3.0'」と等しいことになってしまいます。</p>

<p>ここで心に留めておくべき重要なことは、可能な限り「>=」ではなく「~>」を使うことで、他の人たちがあなたのgemを使ったときに、将来のリリースで潜在的なバグや失敗がでることからあなた自身を守る、ということです。</p>

<!--
If you’re dealing with a lot of gem dependencies in your application, 
we recommend that you take a look into Bundler or Isolate which do a great job of managing a complex version manifest for many gems.	
-->

<blockquote>
	もしあなたのアプリケーション内でたくさんのgemの依存関係を扱っているなら、
	たくさんのgemのために複雑なバージョンの管理の素晴らしい仕事をしている
	「<a href="http://gembundler.com/">Bundler</a>」か「<a href="https://github.com/jbarnette/isolate">Isolate</a>」の中を見ておくことをお勧めします。
</blockquote>

<h4>Requiring RubyGems</h4>
<p>要約: いらない.</p>

<p>こういう行・・・・</p>

<pre>
require 'rubygems'
</pre>

<p>・・・・は、あなたのgemコードに書く必要はありません。RubyGemsはgemが必要なときにはロードされているからです。require 'rubygems'をあなたのコードに書く必要がないということはgemはRubyGemsクライアントがなくても簡単に使えるということを意味します。</p>

<p>より詳細な情報は<a href="http://tomayko.com/writings/require-rubygems-antipattern">Ryan Tomayko</a>のこの件に関するオリジナルポストを確認してください。</p>

<h3 id="loading-code">コードを読み込む</h3>

<p>根本的に、RubyGemsはあなたがRubyの$LOAD_PATHをうまく管理するのを手伝うために存在します。
	$LOAD_PATHはrequire宣言が新しいコードを拾ってくる手段です。あなたがコードを正しくロードしているかを確かめるにはいくつか方法があります。</p>

<h4>Respect the global load path</h4>

<p>あなたのgemファイルをパッケージ化するとき、あなたのlibディレクトリになにがあるかをよく注意する必要があります。あなたがインストールしたすべてのgemはそのlibディレクトリがあり、あなたの$LOAD_PATHに追加されます。これはlibディレクトリのトップレベルにあるファイルがrequireされる可能性があるということを意味します。</p>

<p>例えば、次のような構成のfooというgemがあるとします。</p>

<pre>
.
└── lib
    ├── foo
    │   └── cgi.rb
    ├── erb.rb
    ├── foo.rb
    └── set.rb
</pre>

<p>あなたのカスタムしたerbとsetファイルはあなたのgemの中にあるので害がないようにもみえます。
	しかし、実際には、このgemをrequireした人はRubyのスタンダードライブラリーで提供される<a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/erb/rdoc/ERB.html">ERB</a>と
	<a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/set/rdoc/Set.html">Set</a>クラスを持ってくることができなくなります。</p>

<p>このあたりを解決する一番の方法はファイルをlib以下の違うディレクトリにファイルを配置することです。通常の慣習では、これは首尾一貫させるべきですが、あなたのgemと同じ名前のフォルダ名をつけます。例えば、lib/foo/cgi.rb。</p>

<h4>Requiring files relative to each other</h4>

<p>gemはあなたのgemにあるほかのRubyファイルを持ってくるのに__FILE__を使うべきではありません。驚くべきことにこのようなコードはgemのなかで日常茶飯事です。：</p>

<pre>
require File.join(
          File.dirname(__FILE__),
          "foo", "bar")

# or

require File.expand_path(File.join(
          File.dirname(__FILE__),
          "foo", "bar"))
</pre>

<p>修正は簡単です、相対的なロードパスのファイルをrequireするだけです。</p>

<pre>
require 'foo/bar'
</pre>

<p><a href="/make-your-own-gem/">あなたのgemを作ろう</a>ガイドは、実際、この振る舞いの良い例を含んでいます。
	テストスイートも動作します。このgemのコードは<a href="https://github.com/qrush/hola">GitHub</a>にあります。</p>

<h4>Mangling the load path</h4>
<p>gemは$LOAD_PATH変数を変更するべきではありません。RubyGems自身がこれを管理してくれます。このようなコードは必要ありません。：</p>

<pre>
lp = File.expand_path(File.dirname(__FILE__))
unless $LOAD_PATH.include?(lp)
  $LOAD_PATH.unshift(lp)
end

# or

__DIR__ = File.dirname(__FILE__)

$LOAD_PATH.unshift __DIR__ unless
  $LOAD_PATH.include?(__DIR__) ||
  $LOAD_PATH.include?(File.expand_path(__DIR__))
</pre>
  
<p>RubyGemsがgemをアクティベートしたとき、RubyGemsはあなたのパッケージのlibフォルダを$LOAD_PATHに加えてほかの普通のlibやアプリケーションからrequireできるようにします。安全にあなたのlibフォルダのどのファイルも相対的にrequireできます。</p>

<h3 id="prerelease-gems">プレリリースgem</h3>

<p>多くのgem開発者たちは、発表する準備ができているかテストするバージョンや大きなgemリリースの前のエッジリリースを持っています。RubyGemsは「プレリリース」バージョンの概念をサポートしています。ベータ、アルファその他実際にgemをリリースする価値があればなんでも。</p>

<p>この機能を利用するのは簡単です。必要なのはgemのバージョンに１つ以上の文字を加えるだけです。例えば、ここにプレリリースgemspecのバージョンフィールドがあります。：</p>

<pre>
Gem::Specification.new do |s|
  s.name = "hola"
  s.version = "1.0.0.pre"
</pre>

<p>またプレリリースバージョンナンバーは2.0.0rc1とか1.5.0.beta.3などを含んでも構いません。ただ、文字を入れてセットするだけです。これらのgemは--preフラグでインストールされます。このように：</p>

<pre>
% gem list factory_girl -r --pre

*** REMOTE GEMS ***

factory_girl (2.0.0.beta2, 2.0.0.beta1)
factory_girl_rails (1.1.beta1)

% gem install factory_girl --pre
Successfully installed factory_girl-2.0.0.beta2
1 gem installed
</pre>

<hr />

<h3>クレジット</h3>

<p>いくつかの資料をもとにこのガイドを作成しました。:</p>

<ul>
  <li><a href="http://yehudakatz.com/2009/07/24/rubygems-good-practice/">Rubygems Good Practice</a></li>
  <li><a href="http://weblog.rubyonrails.org/2009/9/1/gem-packaging-best-practices/">Gem Packaging: Best Practices</a></li>
  <li><a href="http://blog.segment7.net/2010/11/15/how-to-name-gems">How to Name Gems</a></li>
</ul>
