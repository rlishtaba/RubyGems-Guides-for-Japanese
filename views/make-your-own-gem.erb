<!--
Make your own gem
From start to finish, learn how to package your Ruby code in a gem.
-->

<h2>
	あなたのgemを作ろう<br />
	<small>最初から最後まで、gemのRubyコードをパッケージする方法を説明します。</small>
</h2>

<hr />

<!--
Introduction
Your first gem
Requiring more files
Adding an executable
Writing tests
Documenting your code
Wrapup
-->

<ul>
	<li><a href="#intro">イントロダクション</a></li>
	<li><a href="#first-gem">はじめてのgem</a></li>
	<li><a href="#more-files">必要なファイル</a></li>
	<li><a href="#adding-an-executable">実行ファイルを追加する</a></li>
	<li><a href="#writing-tests">テストを書く</a></li>
	<li><a href="#documenting-code">コードを文書化する</a></li>
	<li><a href="#wrapup">ラップアップ</a></li>
</ul>

<hr />

<!--
Introduction

Creating and publishing your own gem is simple thanks to the tools baked right into RubyGems.
Let’s make a simple “hello world” gem, and feel free to play along at home!
 The code for the gem we’re going to make here is up on GitHub.
-->

<h3>イントロダクション</h3>
<p>
	あなたのgemを作成し公開することは、RubyGemsのthe tools baked rightのおかげで簡単です。
	単純な「Hello world」gemを作成し、気軽に家で遊んでみましょう！
	ここで作成するgemのコードは、<a href="https://github.com/qrush/hola">GitHub</a>にあります。
</p>

<hr />

<!--
Your first gem

I started with just one Ruby file for my hola gem, and the gemspec. 
You’ll need a new name for yours (maybe hola_yourusername) to publish it. 
Check the Patterns guide for basic recommendations to follow when naming a gem.
-->

<h3>はじめてのgem</h3>
<p>
	私は、私のgem「hola」のための１つのRubyファイルとgemspecファイルだけで始めました。
	あなたは、新しいgemを共有するには、あなたの新しいgemの名前（hola_yourusernameのような）が必要です。
	gemの名前をつける時は、パターンの<a href="/patterns/#consistent-naming">基本的な推奨事項</a>を確認して従って下さい。
</p>

<pre>
% tree
.
├── hola.gemspec
└── lib
    └── hola.rb
</pre>

<!--
Code for your package is placed within the lib directory. 
The convention is to have one Ruby file with the same name as your gem, since that gets loaded when require 'hola' is run. 
That one file is in charge of setting up your gem’s code and API.

The code inside of lib/hola.rb is pretty bare bones. 
It just makes sure that you can see some output from the gem:
-->

<p>
	あなたのパッケージのためのコードは「lib」ディレクトリの中に配置します。
	規則では、「require 'hola'」が実行されたとき、gemと同じ名前のRubyファイルガロードされることから、それが1つ必要です。
	そのファイルは、gemコードとAPIの設定を行います。
</p>
<p>
	「lib/hola.rb」の内部のコードは必要最低限です。
	それはgemからのアウトプットを見ることができることを確認できます。
</p>

<pre>
% cat lib/hola.rb
class Hola
  def self.hi
    puts "Hello world!"
  end
end
</pre>

<!--
The gemspec defines what’s in the gem, who made it, and the version of the gem. 
It’s also your interface to RubyGems.org. 
All of the information you see on a gem page (like jekyll’s) comes from the gemspec.
-->

<p>
	gemspecは、gemのことや、作者やバージョンを定義します。
	それらは、<a href="http://rubygems.org"/>RubyGems.org</a>へのインターフェースでもあります。
	あなたが見ているgemパッケージ（例えば<a href="http://rubygems.org/gems/jekyll">jekyll</a>）の全ての情報は、gemspecからきています。
</p>

<pre>
% cat hola.gemspec
Gem::Specification.new do |s|
  s.name        = 'hola'
  s.version     = '0.0.0'
  s.date        = '2010-04-28'
  s.summary     = "Hola!"
  s.description = "A simple hello world gem"
  s.authors     = ["Nick Quaranto"]
  s.email       = 'nick@quaran.to'
  s.files       = ["lib/hola.rb"]
  s.homepage    =
    'http://rubygems.org/gems/hola'
end
</pre>

<!--
Look familiar? 
The gemspec is also Ruby, so you can wrap scripts to generate the file names and bump the version number. 
There are lots of fields the gemspec can contain.
To see them all check out the full reference.

After you have created a gemspec, you can build a gem from it. 
Then you can install the generated gem locally to test it out.
-->

<p>
	見覚えがありませんか？
	gemspecはRubyでもあります。つまりあなたはファイル名やバージョン番号をバンプするスクリプトをラップすることができます。
	gemspecに含めることのできるたくさんのフィールドがあります。
	全てを見るには完全な<a href="specification-reference/">仕様</a>を参照して下さい。
</p>
<p>
	gemspecを作成した後、そこからgemをビルドします。
	次に、それをテストするためにローカルで生成されたgemをインストールすることができます。
</p>

<pre>
% gem build hola.gemspec
Successfully built RubyGem
Name: hola
Version: 0.0.0
File: hola-0.0.0.gem

% gem install ./hola-0.0.0.gem
Successfully installed hola-0.0.0
1 gem installed
</pre>

<!--
Of course, the smoke test isn’t over yet: the final step is to require the gem and use it:
-->

<p>
	もちろん、スモークテストはまだ終わっていない。
	最後のステップはgemをrequireし、使うことです。
</p>

<pre>
% irb
>> require 'hola'
=> true
>> Hola.hi
Hello world!
</pre>

<!--
If you’re using an earlier Ruby than 1.9.2, you need to start the session with irb -rubygems or require the rubygems library after you launch irb.

Now you can share hola to with the rest of the Ruby community. 
Publishing your gem out to RubyGems.org only takes one command, provided that you have an account on the site. 
To setup your computer with your RubyGems account:
-->

<blockquote>
	もしRuby1.9.2以前を使っているなら、irbを起動した後に、セッションを開始するときに「irb -rubygems」かrubygemsをrequireする必要があります。
</blockquote>

<p>
	いまあなたはRubyコミュニティのrestと一緒に「hola」を共有することができます。
	RubyGems.orgに出力してあなたのgemを共有するには1つのコマンドでできますが、あなたがRubyGems.orgのアカウントを持っていることが条件です。
	あなたのRubyGemsアカウントとコンピュータを設定する為には次の通りです。
</p>

<pre>
$ curl -u qrush https://rubygems.org/api/v1/api_key.yaml >
~/.gem/credentials
Enter host password for user 'qrush':
</pre>

<!--
Once this has been setup, you can push out the gem:
-->

<p>
	セットアップが済んだら、あなたはgemをpushすることができます。
</p>
<pre>
% gem push hola-0.0.0.gem
Pushing gem to RubyGems.org...
Successfully registered gem: hola (0.0.0)
</pre>

<!--
In just a short time (usually less than a minute), your gem will be available for installation by anyone. 
You can see it on the RubyGems.org site or grab it from any computer with RubyGems installed:
-->

<p>
	少しの時間（大抵は１分未満）後、あなたのgemは誰でもインストールすることが可能になります。
	あなたは<a href="https://rubygems.org/gems/hola">RubyGems.orgのサイトでそれを参照</a>するか、RubyGemsがインストールされたコンピュータから確認できます。
</p>

<pre>
% gem list -r hola

*** REMOTE GEMS ***

hola (0.0.0)

% gem install hola
Successfully installed hola-0.0.0
1 gem installed
</pre>

<!--
It’s really that easy to share code with Ruby and RubyGems.
-->

<p>
	RubyやRubyGemsを含むコードを共有することは本当に簡単です。
</p>

<hr />

<!--
Requiring more files

Having everything in one file doesn’t scale well.
Let’s add some more code to this gem.
-->

<h3>必要なファイル</h3>
<p>
	一つのファイルにすべてをまとめるのはあまり良くありません。
	gemのコードをいくつか追加してみましょう。
</p>

<pre>
% cat lib/hola.rb
class Hola
  def self.hi(language = "english")
    translator = Translator.new(language)
    puts translator.hi
  end
end

class Hola::Translator
  def initialize(language)
    @language = language
  end

  def hi
    case @language
    when "spanish"
      "hola mundo"
    else
      "hello world"
    end
  end
end
</pre>

<!--
This file is getting pretty crowded. 
Let’s break out the Translator into a separate file. 
As mentioned before, the gem’s root file is in charge of loading code for the gem. 
The other files for a gem are usually placed in a directory of the same name of the gem inside of lib. 
We can split this gem out like so:
-->

<p>
	このファイルはかなり混み合ってきています。
	「Translator」を別のファイルに分離してみましょう。
	以前述べたように、gemのルートファイルはgemのためのローディングコードの役割です。
	gemのその他のファイルは、大抵lib内のgemと同じ名前のディレクトリに配置されます。
	以下のようにgemを分離する事ができます。
</p>

<pre>
% tree
.
├── hola.gemspec
└── lib
    ├── hola
    │   └── translator.rb
    └── hola.rb
</pre>

<!--
The Translator is now in lib/hola, which can easily be picked up with a require statement from lib/hola.rb. 
The code for the Translator did not change much:
-->

<p>
	「Translator」は「lib/hola」の中にあり、requireステートメントと一緒に「lib/hola.rb」から読み込まれます。
	「Translator」のコードは特に変更していません。
</p>

<pre>
% cat lib/hola/translator.rb
class Hola::Translator
  def initialize(language)
    @language = language
  end

  def hi
    case @language
    when :spanish
      "hola mundo"
    else
      "hello world"
    end
  end
end
</pre>

<!--
But now the hola.rb file has some code to load the Translator:
-->

<p>
	しかし「hola.rb」ファイルは「Translator」をロードするためのコードを持ちます。
</p>

<pre>
% cat lib/hola.rb
class Hola
  def self.hi(language = :english)
    translator = Translator.new(language)
    translator.hi
  end
end

require 'hola/translator'
</pre>

<!--
Let’s try this out. First, fire up irb:
-->

<p>
	では試してみましょう。まずirbを起動します。
</p>

<pre>
% irb -Ilib -rhola
irb(main):001:0> Hola.hi(:english)
=> "hello world"
irb(main):002:0> Hola.hi(:spanish)
=> "hola mundo"
</pre>

<!--
We need to use a strange command line flag here: -Ilib. 
Usually RubyGems includes the lib directory for you, so end users don’t need to worry about configuring their load paths. 
However, if you’re running the code outside of RubyGems, you have to configure things yourself. 
It’s possible to manipulate the $LOAD_PATH from within the code itself, but that’s considered an anti-pattern in most cases. 
There are many more anti-patterns (and good patterns!) for gems, explained in this guide.

If you’ve added more files to your gem, make sure to remember to add them to your gemspec’s files array before publishing a new gem! 
For this reason (among others), many developers automate this with Hoe, Jeweler, Rake, Bundler, or just a dynamic gemspec.

Adding more directories with more code from here is pretty much the same process. 
Split your Ruby files up when it makes sense! 
Making a sane order for your project will help you and your future maintainers from headaches down the line.
-->

<p>
	私たちはここで奇妙なコマンドラインフラグ「-Ilib」を使う必要があります。
	通常、RubyGemsはあなたのためのlibディレクトリが含まれており、エンドユーザはそれらのロードパスを設定する心配する必要はありません。
	しかしながら、もしあなたがRubyGemsの外部のコードを実行している場合、あなたは自分で設定をしなければなりません。
	コード内部から$LOAD_PATHを操作する事は可能ですが、ほとんどの場合、その方法は良くないパターンだと考えられています。
	gemのもっと多くの良くないパターン（と良いパターン！）はたくさんあり、このガイドで説明されています。
</p>

<p>
	あなたがgemにファイルを追加した場合、gemを公開する前にgemspecの「files」配列に追加することを忘れないで下さい。
	このため（とりわけ）、多くの開発者は、
	<a href="http://seattlerb.rubyforge.org/hoe/">Hoe</a>、
	<a href="https://github.com/technicalpickles/jeweler">Jeweler</a>、
	<a href="http://rake.rubyforge.org/classes/Rake/GemPackageTask.html">Rake</a>、
	<a href="http://railscasts.com/episodes/245-new-gem-with-bundler">Bundler</a>、
	または<a href="https://github.com/wycats/newgem-template/blob/master/newgem.gemspec">ダイナミックgemspec</a>だけでこれを自動化する事ができます。
</p>

<p>
	それが理にかなっているとき、Rubyファイルを分離しましょう！
	あなたのプロジェクトのために健全な整理をすることは、あなたとあなたの将来のメンテナの役に立ちます。
</p>

<hr />

<!--
Adding an executable

In addition to providing libraries of Ruby code, gems can also expose one or many executable files to your shell’s PATH. 
Probably the best known example of this is rake. 
Another very useful one is prettify_json.rb, included with the JSON gem, which formats JSON in a readable manner (and is included with Ruby 1.9). 
Here’s an example:
-->

<h3>実行ファイルを追加する</h3>

<p>
	Rubyコードのライブラリを提供することに加えて、gemはまたシェルのPATHに1つ以上の実行可能ファイルを公開することができます。
	おそらく、これの最も良く知られている例は「rake」です。
	Another very useful one is prettify_json.rb, included with the JSON gem, which formats JSON in a readable manner (and is included with Ruby 1.9). 
	（他に非常に便利なものは「prettify_json.rb」で、<a href="http://rubygems.org/gems/json">JSON</a>gemと一緒に含まれています。）
	以下に例を示します。
</p>

<pre>
% curl -s http://jsonip.com/ | \
  prettify_json.rb
{
  "ip": "24.60.248.134"
}
</pre>

<!--
Adding an executable to a gem is a simple process. 
You just need to place the file in your gem’s bin directory, and then add it to the list of executables in the gemspec. 
Let’s add one for the Hola gem. 
First create the file and make it executable:
-->

<p>
	gemに実行可能ファイルを追加することは簡単なプロセスです。
	gemの「bin」ディレクトリの中にファイルを配置し、gemspecの実行可能リストにそれを追加するだけです。
	「Hola」gemに１つ追加してみましょう。
	まずファイルを作成し、それを実行可能にします。
</p>

<pre>
% mkdir bin
% touch bin/hola
% chmod a+x bin/hola
</pre>

<!--
The executable file itself just needs a shebang in order to figure out what program to run it with. 
Here’s what Hola’s executable looks like:
-->

<p>
	The executable file itself just needs a shebang in order to figure out what program to run it with. 
	（実行可能ファイルは、〜の<a href="http://www.catb.org/jargon/html/S/shebang.html">shebang</a>が必要です。）
	ここでは「Hola」の実行可能ファイルは次のようになります。
</p>

<pre>
% cat bin/hola
#!/usr/bin/env ruby

require 'hola'
puts Hola.hi(ARGV[0])
</pre>

<!--
All it’s doing is loading up the gem, and passing the first command line argument as the language to say hello with. 
Here’s an example of running it:
-->

<p>
	All it’s doing is loading up the gem, and passing the first command line argument as the language to say hello with. 
	すべてのgemをロードしている全て〜、「hello」と出力するために最初のコマンドライン引数に言語を渡します。
	以下に実行例があります。
</p>

<pre>
% ruby -Ilib ./bin/hola
hello world

% ruby -Ilib ./bin/hola spanish
hola mundo
</pre>

<!--
Finally, to get Hola’s executable included when you push the gem, you’ll need to add it in the gemspec.
-->

<p>
	最後に、gemをpushするときincludeされた「Hola」の実行可能ファイル得るため、あなたはgemspecにそれを追加する必要があります。
</p>

<pre>
% head -4 hola.gemspec
Gem::Specification.new do |s|
  s.name        = 'hola'
  s.version     = '0.0.1'
  s.executables << 'hola'
</pre>

<!--
Push up that new gem, and you’ll have your own command line utility published! 
You can add more executables as well in the bin directory if you need to, there’s an executables array field on the gemspec.

Note that you should change the gem’s version when pushing up a new release. 
For more information on gem versioning, see the Patterns Guide
-->

<p>
	あたらしいgemをpushしましょう、そしてコマンドラインユーティリティから共有にしましょう！
	もし必要なら「bin」ディレクトリに同じように実行可能ファイルを追加できますし、gemspecにも「executables」の配列項目があります。
</p>

<blockquote>
	新しいgemをpushするときにgemのバージョンを更新する必要があることに注意して下さい。
	gemのバージョンの詳細については、<a href="/patterns/#semantic-versioning">パターン</a>を参照して下さい。
</blockquote>

<hr />

Writing tests

Testing your gem is extremely important. 
Not only does it help assure you that your code works, but it helps others know that your gem does its job. 
When evaluating a gem, Ruby developers tend to view a solid test suite (or lack thereof) as one of the main reasons for trusting that piece of code.

Gems support adding test files into the package itself so tests can be run when a gem is downloaded. 
An entire community effort has sprung up called GemTesters to help document how gem test suites run on different architectures and interpreters of Ruby.

In short: TEST YOUR GEM! Please!

Test::Unit is Ruby’s built-in test framework. 
There are lots of tutorials for using it online. 
There are many other test frameworks available for Ruby as well. RSpec is a popular choice. 
At the end of the day, it doesn’t matter what you use, just TEST!

Let’s add some tests to Hola. 
This requires adding a few more files, namely a Rakefile and a brand new test directory:

<h3>テストを書く</h3>

<p>
	gemをテストすることは非常に重要です。
	あなたのコードが動くことを保証することの助けになるだけでなく、他人がgemの働きを知る手助けにもなります。
	gemを評価する際には、Rubyの開発者はコードを信頼する主な理由の一つとして単体テストスイート（またはその欠如）を見る傾向があります。
</p>

<p>
	gemはパッケージ自体にテストファイルを追加することをサポートしており、テストはgemがダウンロードされたときに実行されます。
	コミュニティ全体の努力は、Gemテスターがgemのテストスイートを異なるアーキテクチャやRubyのインタプリタ上で実行する方法のヘルプドキュメントを呼び出す
</p>
<p></p>
<p></p>
<p></p>

<pre>
% tree
.
├── Rakefile
├── bin
│   └── hola
├── hola.gemspec
├── lib
│   ├── hola
│   │   └── translator.rb
│   └── hola.rb
└── test
    └── test_hola.rb
</pre>
    
The Rakefile gives you some simple automation for running tests:

<pre>
% cat Rakefile
require 'rake/testtask'

Rake::TestTask.new do |t|
  t.libs << 'test'
end

desc "Run tests"
task :default => :test
</pre>

Now you can run rake test or simply just rake to run tests. Woot! Here’s a basic test file for hola:

<pre>
% cat test/test_hola.rb
require 'test/unit'
require 'hola'

class HolaTest < Test::Unit::TestCase
  def test_english_hello
    assert_equal "hello world",
      Hola.hi("english")
  end

  def test_any_hello
    assert_equal "hello world",
      Hola.hi("ruby")
  end

  def test_spanish_hello
    assert_equal "hola mundo",
      Hola.hi("spanish")
  end
end
</pre>

Finally, to run the tests:

<pre>
% rake test
(in /Users/qrush/Dev/ruby/hola)
Loaded suite
Started
...
Finished in 0.000736 seconds.

3 tests, 3 assertions, 0 failures, 0 errors, 0 skips

Test run options: --seed 15331
</pre>

It’s green! Well, depending on your shell colors. For more great examples, the best thing you can do is hunt around GitHub and read some code.

Documenting your code

By default most gems use RDoc to generate docs. There are plenty of great tutorials for learning how to mark up your code with RDoc. Here’s a simple example:

<pre>
# The main Hola driver
class Hola
  # Say hi to the world!
  #
  # Example:
  #   >> Hola.hi("spanish")
  #   => hola mundo
  #
  # Arguments:
  #   language: (String)

  def self.hi(language = "english")
    translator = Translator.new(language)
    puts translator.hi
  end
end
</pre>

Another great option for documentation is YARD, since when you push a gem, RubyDoc.info generates YARDocs automatically from your gem. YARD is backwards compatible with RDoc, and it has a good introduction on what’s different and how to use it.

Wrapup

With this basic understanding of building your own RubyGem, we hope you’ll be on your way to making your own! The next few guides cover patterns in making a gem and the other capabilities of the RubyGems system.

Credits

This tutorial was adapted from Gem Sawyer, Modern Day Ruby Warrior. The code for this gem can be found on GitHub.