<!--
What is a gem?
Learn what a gem can do for your Ruby applications, and what’s inside of one.
-->
<h2>
	gemとは何か？<br />
	<small>gemがあなたのRubyアプリケーションのためにできることと、gemの内部について説明します。</small>
</h2>

<hr />

<!--
Introduction
Structure of a Gem
Requiring code
The Gemspec
-->

<ul>
	<li><a href="#introduction">イントロダクション</a></li>
	<li><a href="#structure">Gemの構造</a></li>
	<li><a href="#requiring">必要なコード</a></li>
	<li><a href="#gemspec">Gemspec</a></li>
</ul>

<hr />

<!--
Introduction

A RubyGem is a software package, commonly called a “gem”.
Gems contain a packaged Ruby application or library.
The RubyGems software itself allows you to easily download, install, and manipulate gems on your system.

Each gem has a name, version, and platform.
For example, the rake gem has a 0.8.7 version.
Rake’s platform is ruby, which means it works on any platform Ruby runs on.
Other platforms include java (like nokogiri) and mswin32 (like sqlite-ruby).

Gems can be used to extend or modify functionality within a Ruby application.
Commonly, they’re used to split out reusable functionality that others can use in their applications as well.
Some gems also provide command line utilities to help automate tasks and speed up your work.
As of Ruby 1.9.2, RubyGems is included when you install the programming language, so gems are both ubiquitous and extremely useful.
If you’re using an earlier version of Ruby, it’s simple to install RubyGems as an addon.

For information on installing or upgrading RubyGems, please visit the RubyGems.org download page.
-->

<a id="introduction"></a>
<h3>イントロダクション</h3>

<p>
	RubyGemはソフトウェアパッケージで、一般的にはgemと呼ばれます。
	gemの内容はパッケージングされたRubyアプリケーションかライブラリです。
	RubyGemsのソフトウェア自体はあなたのシステム上でgemを簡単にダウンロード、インストール、操作できるようにします。
</p>
<p>
	それぞれのgemは名前、バージョン、プラットフォームを持ちます。
	例えば、「<a href="http://rubygems.org/gems/rake">rake</a>」gemはバージョン「0.8.7」です。
	Rakeのプラットフォームは「ruby」で、Rubyが起動する任意のプラットフォーム上で動作することを意味します。
	その他のプラットフォームは「Java」（例えば<a href="http://rubygems.org/gems/nokogiri/versions/1.4.4.2-java">nokogiri</a>）や「mswin32」（例えば<a href="http://rubygems.org/gems/sqlite-ruby/versions/2.2.3-mswin32">sqlite-ruby</a>）を含みます。
</p>
<p>
	gemはRubyアプリケーション内で機能を拡張したり変更するために使用されることができます。
	一般に、gemは他のアプリケーションでも同じように使える再利用可能な機能を分割するために使用されます。
	またいくつかのgemはタスクを自動化したり作業をスピードアップするためのコマンドラインユーティリティの提供もしています。
	gemは普遍的であり非常に便利なので、Ruby1.9.2からはRubyGemsはあなたがプログラム言語をインストールする時に含まれようになっています。
	もし以前のバージョンのRubyを使用している場合は、アドオンとして簡単にRubyGemsをインストールすることができます。
</p>
<p>
	RubyGemsのインストールまたはアップグレードについての詳細は、RubyGems.orgの<a href="http://rubygems.org/pages/download">ダウンロード</a>ページをご覧下さい。
</p>

<hr />

<!--
Structure of a Gem

Gems contain three components:

Code (including tests and supporting utilities)
Documentation
gemspec
Each gem follows the same standard structure of code organization:
-->

<a id="structure"></a>
<h3>Gemの構造</h3>

<p>
	gemは3つのコンポーネントを含みます。
</p>

<ul>
	<li>コード（テストやサポート·ユーティリティーを含む）</li>
	<li>ドキュメント</li>
	<li>gemspec</li>
</ul>

<p>
	全てのgemは、標準的なコード構成に従っています。
</p>

<pre>
% tree freewill
freewill/
├── bin/
│   └── freewill
├── lib/
│   └── freewill.rb
├── test/
│   └── test_freewill.rb
├── README
├── Rakefile
└── freewill.gemspec
</pre>

<!--
Here, you can see the major components of a gem:

The lib directory contains the code for the gem
The test or spec directory contains tests, depending on which test framework the developer uses
A gem usually has a Rakefile, which the rake program uses to automate tests, generate code, and perform other tasks.
This gem also includes an executable file in the bin directory, which will be loaded into the user’s PATH when the gem is installed.
Documentation is usually included in the README and inline with the code.
When you install a gem, documentation is generated automatically for you.
Most gems include RDoc documentation, but some use YARD docs instead.
The final piece is the gemspec, which contains information about the gem.
The gem’s files, test information, platform, version number and more are all laid out here along with the author’s email and name.

More information on the gemspec file

Building your own gem
-->

<p>
	ここでは、gemの主要なコンポーネントを確認することができます。
</p>

<ul>
	<li>「lib」ディレクトリは、gemのためのコードを格納します。</li>
	<li>「test」または「spec」ディレクトリは、開発者が使用するフレームワークに応じたテストを格納します。</li>
	<li>gemはたいてい「Rakefile」を持ち、<a href="http://rake.rubyforge.org/">rake</a>というプログラムが自動テストや、コード生成や、他のタスクを実行するために使用します。</li>
	<li>このgemは「bin」ディレクトリ内に実行ファイルも含んでおり、gemがインストールされる時にユーザの「PATH」の中にロードされるでしょう。</li>
	<li>ドキュメントはたいてい「README」というファイルやコードと一緒にインラインに含まれています。
		あなたがgemをインストールすると、ドキュメントは自動的に生成されます。
		ほとんどのgemは<a href="http://rdoc.sourceforge.net/doc/">RDoc</a>のドキュメントを含みますが、いくつかのgemは代わりに<a href="http://yardoc.org/">YARD</a>のドキュメントを使っています。</li>
	<li>最後のピースはgem自体についての情報を格納する「gemspec」です。
		gemのファイル、テスト情報、プラットフォーム、バージョン番号などが、制作者のメールアドレスと名前と一緒にここに配置されます。</li>
</ul>

<p>
	<a href="/specification-reference/">gemspecファイルについての詳細情報</a>
</p>
<p>
	<a href="/make-your-own-gem/">あなたのgemを作ろう</a>
</p>

<hr />

<!--
Requiring code

RubyGems modifies your Ruby load path, which controls how your Ruby code is found by the require statement.
When you require a gem, really you’re just placing that gem’s lib directory onto your $LOAD_PATH.
Let’s try this out in irb and get some help from the pretty_print library included with Ruby.

Tip: Passing -r to irb will automatically require a library when irb is loaded.
-->

<a id="requiring"></a>
<h3>必要なコード</h3>

<p>
	RubyGemsはrubyの読み込みパスを変更し、Rubyコードがどのように「require」ステートメントによって発見されるかを操作します。
	あなたがあるgemを「require」したとき、本当にあなたは$LOAD_PATHの中にそのgemの「lib」ディレクトリを配置しているだけです。
	これを「irb」で出力したり、Rubyに含まれる「pretty_print」ライブラリから手助けを得てみましょう。
</p>
<p>
	小ネタ:「irb」がロードされたとき、引数「-r」を渡すと自動的にライブラリがrequireされます。
</p>

<pre>
% irb -rpp
>> pp $LOAD_PATH
[".../lib/ruby/site_ruby/1.9.1",
 ".../lib/ruby/site_ruby",
 ".../lib/ruby/vendor_ruby/1.9.1",
 ".../lib/ruby/vendor_ruby",
 ".../lib/ruby/1.9.1",
 "."]
</pre>

<!--
By default you have just a few system directories on the load path and the Ruby standard libraries.
To add the awesome_print directories to the load path, you can require its gem:
-->

<p>
	デフォルトでは、いくつかのシステムディレクトリの読み込みパスやRubyの標準ライブラリだけが入っています。
	読み込みパスに「awesome_print」を追加すると、そのgemを「require」することができます。
</p>

<pre>
% irb -rpp
>> require 'ap'
=> true
>> pp $LOAD_PATH[0]
.../gems/awesome_print-1.0.2/lib"
</pre>

<!--
Note: If you’re using Ruby 1.8, you need to require 'rubygems' before requiring any gems.
This is no longer necessary now that RubyGems is installed with Ruby itself.

Once you’ve required rake, then RubyGems automatically drops its lib directory on to the $LOAD_PATH.
Some gems also add additional directories, such as bin, to the load path.
These are completely optional and you can have many directories added to the load path by a single gem.

That’s basically it for what’s in a gem. Drop Ruby code into lib, name a Ruby file the same as your gem (so for freewill, freewill.rb) and it’s loaded by RubyGems.

The lib directory itself normally contains only one .rb file, and then another folder with the same name as the gem with more code in it. For example:
-->

<p>
	注意:もしRuby1.8を使っているなら、全てのgemをrequireする前に「require 'rubygems'」をする必要があります。
	これは現在のRubyではRubyGemsはRuby自体にインストールされているため必要ありません。
</p>
<p>
	一度rakeをrequireしたら、そのときRubyGemsは自動的に$LOAD_PATHにそれの「lib」ディレクトリを入れます。
	いくつかのgemは読み込みパスに「bin」のような追加ディレクトリを追加します。
	これは完全に任意であり、1つのgemが複数のディレクトリを読み込みパスに追加することができます。
</p>
<p>
	That’s basically it for what’s in a gem. 
	「lib」にRubyコードを入れて、Rubyファイルの名前はgemと同じ名前 (例えばgemの名前がfreewillだったらfreewill.rb)にすると、それはRubyGemsによって読み込まれます。
</p>
<p>
	「lib」ディレクトリには通常一つの「.rb」ファイルと、その他の多くのコードが入ったgemと同じ名前のフォルダがありまる。
	例えば次の通りです。
</p>

<pre>
% tree freewill/
freewill/
├── lib/
│   ├── freewill/
│   │   ├── core_ext/
│   │   │   ├── array.rb
│   │   │   └── string.rb
│   │   ├── user.rb
│   │   ├── widget.rb
│   │   └── ...
│   ├── freewill.rb
</pre>

<hr />

<!--
The Gemspec

Your application, your gem’s users, and you 6 months from now need to know who wrote a gem, when, and what it does.
The gemspec tells you this information and is your guide to understanding what a gem contains.

Here’s an example of a gemspec file. You can learn more in how to make a gem.
-->

<a id="gemspec"></a>
<h3>Gemspec</h3>

<p>
	あなたのアプリケーションやあなたのgemの利用者、そして今から6ヶ月後のあなたは、いつ・誰が・何のgemを書いたかを知る必要があります。
	gemspecはこの情報をあなたに伝え、gemの内容を理解するための案内をします。
</p>
<p>
	ここにあるgemspecファイルの例があります。
	さらに<a href="/make-your-own-gem/">gemを作る方法</a>の中でもっと詳しく知ることができます。
</p>

<pre>
% cat freewill.gemspec
Gem::Specification.new do |s|
  s.name        = 'freewill'
  s.version     = '1.0.0'
  s.date        = '2010-04-27'
  s.summary     = "Freewill!"
  s.description = "I will choose Freewill!"
  s.authors     = ["Nick Quaranto"]
  s.email       = 'nick@quaran.to'
  s.homepage    = 'http://example.com'
  s.files       = ["lib/freewill.rb"]
end
</pre>

<!--
For more information on the gemspec, please check out the full Specification Reference which goes over each metadata field in detail.
-->

<p>
	gemspecの詳細については、<a href="/specification-reference/">詳細仕様</a>を参照して下さい。
</p>

<hr />

<!--
Credits

This guide was adapted from Gonçalo Silva’s original tutorial on docs.rubygems.org and from Gem Sawyer, Modern Day Ruby Warrior.
-->

<h3>クレジット</h3>

<p>
	このガイドは、docs.rubygems.orgにある<a href="https://twitter.com/#!/goncalossilva">Gonçalo Silva</a>のオリジナルのチュートリアルと、<a href="http://rubylearning.com/blog/2010/10/06/gem-sawyer-modern-day-ruby-warrior/">Gem Sawyer, Modern Day Ruby Warrior.</a>から翻案されました。
</p>